/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   arena.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ttridon <ttridon@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2017/01/17 13:05:51 by ttridon           #+#    #+#             */
/*   Updated: 2017/01/22 18:45:00 by ttridon          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "vm.h"
#include <math.h>
#include <ncurses.h>

static void		champion_loader(unsigned char *arena, t_champion *champion,
	t_game *game)
{
	int		i;
	int		j;
	int		pos;
	int		ratio;

	wattron(game->left_panel, COLOR_PAIR(1));
	ratio = 0;
	pos = MEM_SIZE / game->nb_players;
	while (champion)
	{
		j = 0;
		i = pos * ratio;
		while (j < champion->size)
		{
			arena[i] = champion->code[j];
			mvwprintw(game->left_panel, i / 64 + 1, i % 64 + 2 * i + 1,
				"%02x", champion->code[j]);
			i++;
			j++;
		}
		ratio++;
		// mvwprintw(game->left_panel, ratio, 0, "%d", i / 64);
		champion = champion->next;
	}
	wattroff(game->left_panel, COLOR_PAIR(1));
}

static void		arena_display_left_panel(t_game *game)
{
	int	i;
	int	j;
	int	lines;
	int	cols;

	lines = sqrt(MEM_SIZE);
	game->left_panel = subwin(stdscr, lines + 2, lines * 3 + 1, 0, 0);
	j = 0;
	while (++j <= lines)
	{
		i = 1;
		cols = lines;
		while (cols--)
		{
			mvwprintw(game->left_panel, j, i, "00 ");
			i += 3;
		}
	}
	box(game->left_panel, ACS_VLINE, ACS_HLINE);
}

void		arena_init(unsigned char *arena, t_champion *champion, t_game *game)
{
	initscr();

	start_color();
	init_pair(1, COLOR_RED, COLOR_BLACK);

	arena_display_left_panel(game);
	// arena_display_right_panel(arena, sqrt(MEM_SIZE), game);

	champion_loader(arena, champion, game);

	wrefresh(game->left_panel);
	// wrefresh(game->right_panel);

	getch();
	endwin();
// }

void arena_init(unsigned char *arena, t_champion *champion, t_game *game)
{
	int i;
	int	j;

	champion = NULL;

	initscr();
	game->left_panel = subwin(stdscr, LINES, COLS, 0 ,0);

	start_color();
	init_pair(1, COLOR_RED, COLOR_BLACK);

	arena[10] = 1;

	j = 1;
	while (j < 64)
	{
		i = 1;
		while (i < 64)
		{
			if (*arena)
				wattron(game->left_panel, COLOR_PAIR(1));
			else
				wattroff(game->left_panel, COLOR_PAIR(1));
			mvwprintw(game->left_panel, j, i, "%02x ", *(arena++));
			i++;
		}
		j++;
	}

	box(game->left_panel, ACS_VLINE, ACS_HLINE);
	refresh();
	getch();
	endwin();
}
